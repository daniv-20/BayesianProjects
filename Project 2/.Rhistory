library(tidyverse)
library(janitor)
library(HDInterval)
library(rstan)
library(rstanarm)
library(bayesplot)
library(ggpubr)
library(flextable)
library(ggplot2)
library(dpl)
install.packages("dpl")
library(dpl)
source(here::here("bayesSim.R"))
set.seed(2648)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
library(HDInterval)
library(rstan)
library(rstanarm)
library(bayesplot)
library(ggpubr)
library(flextable)
library(ggplot2)
library(dpl)
# Safety Monitoring Rule
## Objective of the Safety Monitoring Rule
The goal of the safety monitoring rule is to set a trigger for determining when the rate of severe adverse events is too high. A maximum acceptable rate is pre-specified, and if we are confident that the probability exceeds this level, the study is discontinued.
## Parameter to Estimate and Hypothesis
The parameter we try to estimate for the safety monitoring rule is the proability $\theta$ that a patient will have an adverse event of Grade 3 (severe) or higher. We define our maximum clinically acceptable risk level as $\theta_{mcid}$ = 0.05; our safety monitoring rule is triggered if there is a greater than 80% chance that $\theta > \theta_{mcid}$.
## Statistical Model
The beta-binomial model is a functional family of a prior (beta distribution) and likelihood (binomial distribution) function. These are multiplied together at a range of values of $\theta$ to generate our posterior distribution, from which we can estimate the probability that $\theta > \theta_{mcid}$
### Prior
The prior distribution represents our knowledge of the adverse event rate before conducting the study. We use a $Beta(1,1)$ prior, which contains no information about the parameter, to represent our lack of informaton about the event rate.
### Likelihood
The likelihood function represents the chance of observing the number of events seen in the trial, given a proposed risk level. We define this mathematically using a $Binomial(N_{events}, N_{total}, \theta)$ distribution. This provides an empirical estimate of the event rate parameter.
### Posterior Distribution
We define the posterior distribution as the product of the prior and the likelihood of our data:
f_post <- function(x){
pct <- signif(1 - pbeta(0.05, x + 1, 50 - x + 1), 3)
return(paste0(pct, "%"))
}
df_post <- data.frame(Events = 0:50) %>%
mutate(`Posterior Probability` = f_post(Events))
t = data.frame(Input = c("N", "SampleSize", "Theta.test (vector)", "Alpha.prior", "Beta.prior", "Theta.success"),
Description = c("Number of Simulations", "Number of participants in simulated study", "A vector containing a range of possible ùúÉ values.", "A vector containing the alpha values of the priors", "A vector containing the beta values of the priors", "The success criterion"),
Value = c("10,000", 50, "Varies: 0<ùúÉ<1 ", "1, 6, 4",
"1, 9, 28", 0.124) )
t2 = data.frame(Output = c("Theta.test", "Result", "Value"),
Description = c("The value of theta being simulated", "Whether the type of result displayed is power or type I error", "The value of the simulated power/type I error"))
flextable(t)
flextable(t)
flextable(t2)
library(dplyr)
source(here::here("bayesSim.R"))
set.seed(2648)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
library(janitor)
library(HDInterval)
library(rstan)
library(rstanarm)
library(bayesplot)
library(ggpubr)
library(flextable)
library(ggplot2)
library(dplyr)
source(here::here("bayesSim.R"))
set.seed(2648)
knitr::opts_chunk$set(echo = TRUE)
f_post <- function(x){
pct <- signif(1 - pbeta(0.05, x + 1, 50 - x + 1), 3)
return(paste0(pct, "%"))
}
df_post <- data.frame(Events = 0:50) %>%
mutate(`Posterior Probability` = f_post(Events))
t = data.frame(Input = c("N", "SampleSize", "Theta.test (vector)", "Alpha.prior", "Beta.prior", "Theta.success"),
Description = c("Number of Simulations", "Number of participants in simulated study", "A vector containing a range of possible ùúÉ values.", "A vector containing the alpha values of the priors", "A vector containing the beta values of the priors", "The success criterion"),
Value = c("10,000", 50, "Varies: 0<ùúÉ<1 ", "1, 6, 4",
"1, 9, 28", 0.124) )
flextable(t)
t2 = data.frame(Output = c("Theta.test", "Result", "Value"),
Description = c("The value of theta being simulated", "Whether the type of result displayed is power or type I error", "The value of the simulated power/type I error"))
flextable(t2)
flextable(t)
flextable(t2)
f_post <- function(x){
pct <- signif(1 - pbeta(0.05, x + 1, 50 - x + 1), 3)
return(paste0(pct, "%"))
}
df_post <- data.frame(Events = 0:50) %>%
mutate(`Posterior Probability` = f_post(Events))
f_post <- function(x){
pct <- signif(1 - pbeta(0.05, x + 1, 50 - x + 1), 3)
return(paste0(pct, "%"))
}
f_post
df_post <- data.frame(Events = 0:50) %>%
mutate(`Posterior Probability` = f_post(Events))
df_post
qn.sim = function(N = 10000, SampleSize = 50, Theta.test = seq(0.01, 0.99, 0.01), Alpha.prior = c(1, 6, 4), Beta.prior = c(1, 9, 28), Theta.success = 0.124){
simdat = data.frame(y = rep(NA, N))
result = data.frame(theta = Theta.test)
i = 1
for(theta in Theta.test){
simdat$y = rbinom(N, SampleSize, theta)
post.prim= get_beta_post(Alpha.prior[1], Beta.prior[1], simdat$y, SampleSize)
post.opt = get_beta_post(Alpha.prior[2], Beta.prior[2], simdat$y, SampleSize)
post.pes = get_beta_post(Alpha.prior[3], Beta.prior[3], simdat$y, SampleSize)
simdat$criterion.prim = pbeta(0.124, post.prim$alpha.post, post.prim$beta.post, lower.tail = FALSE)
simdat$criterion.opt = pbeta(0.124, post.opt$alpha.post, post.opt$beta.post, lower.tail = FALSE)
simdat$criterion.pes = pbeta(0.124, post.pes$alpha.post, post.pes$beta.post, lower.tail = FALSE)
simdat = simdat %>%
mutate(success.prim = ifelse(simdat$criterion.prim > 0.8, 1, 0),
success.opt = ifelse(simdat$criterion.opt > 0.8, 1, 0),
success.pes = ifelse(simdat$criterion.pes > 0.8, 1, 0)
)
result[i,"Primary"] = 1/N * sum(simdat$success.prim)
result[i,"Optimisitc"] = 1/N * sum(simdat$success.opt)
result[i,"Pessimistic"] = 1/N * sum(simdat$success.pes)
#print(simdat)
i = i + 1
}
return(result)
}
qn.sim(N=10000, SampleSize = 50, Theta.test = c(0.375, 0.1875)) %>% flextable()
qn.sim(N=10000, SampleSize = 50, Theta.test = c(0.025, 0.05, 0.075, 0.10, 0.124)) %>% flextable()
0.124*50
((0.124)^7)*((1-0.124)^(y-50))
y <- 7
((0.124)^y)*((1-0.124)^(y-50))
1+7
1+50-7
0.4*50
1+50-20
0.125*50
6+50-20
0.125*50
6+20
9+50-20
1+7
1+50-7
4+7
28+50-7
dbinom(7,50,0.124)
((0.124)^y)*((1-0.124)^(y-50))
dbinom(7,50,0.124)
((0.124)^y)*((1-0.124)^(y-50))
