posterior_var <- (prior_var * likelihood_var) / (prior_var + likelihood_var)
# Extract posterior parameters from MCMC simulation
posterior_samples <- extract(sim)
posterior_mu <- posterior_samples$mu
posterior_sigma <- posterior_samples$sigma
# Overlay histogram of simulated posterior with conjugate posterior
hist(posterior_mu, freq = FALSE, main = "Simulated Posterior Distribution for mu", xlab = "mu", col = "skyblue")
curve(dnorm(x, mean = posterior_mean, sd = sqrt(posterior_var)), add = TRUE, col = "red", lwd = 2)
# Clinically relevant posterior probability estimation using simulated posterior
estimated_prob <- sum(posterior_mu > 209) / length(posterior_mu)
print(paste("Estimated probability of mu > 209 using MCMC simulated posterior:", round(estimated_prob, digits = 2)))
colnames(data)
mean(data$BaselineWeight)
mean(data$EndWeight)
hist(subset(ChickWeight, Time == 21)$weight, main = "Distribution of Chick Weights", xlab = "Weight at Time = 21")
dim(data)
length(unique(data$Chick))
45^2
*2
45^2
2025*2
4050/45
# Clinically relevant posterior probability estimation using simulated posterior
estimated_prob <- sum(posterior_mu > 209) / length(posterior_mu)
print(paste("Estimated probability of mu > 209 using MCMC simulated posterior:", round(estimated_prob, digits = 2)))
# Overlay histogram of simulated posterior with conjugate posterior
hist(posterior_mu, freq = FALSE, main = "Simulated Posterior Distribution for mu", xlab = "mu", col = "skyblue")
curve(dnorm(x, mean = posterior_mean, sd = sqrt(posterior_var)), add = TRUE, col = "red", lwd = 2)
library(rstan)
# Define the Stan Model
gp_model <- "
data {
int<lower = 0> N;     // number of data points
real Y[N];         // observed data
}
parameters {
real mu;              // posterior mean
real<lower=0> sigma;  // posterior standard deviation
}
model {
mu ~ normal(190, 47.5);         // prior for mu
Y ~ normal(mu, sigma);     // vectorized likelihood
}
"
# Simulate the posterior
sim <- stan(model_code = gp_model, data = list(N = length(data$EndWeight), Y = data$EndWeight), chains = 4, iter = 5000*2)
mcmc_trace(sim, pars = c("mu", "sigma"), size = 0.1)
# Calculate posterior parameters based on conjugate model
data_mean <- mean(data$EndWeight)
data_var <- var(data$EndWeight)
prior_mean <- 190
prior_var <- 47.5^2
likelihood_var <- 72
posterior_mean <- (prior_var * data_mean + likelihood_var * prior_mean) / (prior_var + likelihood_var)
posterior_var <- (prior_var * likelihood_var) / (prior_var + likelihood_var)
# Extract posterior parameters from MCMC simulation
posterior_samples <- extract(sim)
posterior_mu <- posterior_samples$mu
posterior_sigma <- posterior_samples$sigma
# Overlay histogram of simulated posterior with conjugate posterior
hist(posterior_mu, freq = FALSE, main = "Simulated Posterior Distribution for mu", xlab = "mu", col = "skyblue")
curve(dnorm(x, mean = posterior_mean, sd = sqrt(posterior_var)), add = TRUE, col = "red", lwd = 2)
# Clinically relevant posterior probability estimation using simulated posterior
estimated_prob <- sum(posterior_mu > 209) / length(posterior_mu)
print(paste("Estimated probability of mu > 209 using MCMC simulated posterior:", round(estimated_prob, digits = 2)))
plot_normal_likelihood(data$EndWeight, sigma = 45)
install.packages("bayesrules")
bayesrules::plot_normal_likelihood(data$EndWeight, sigma = 45)
bayesrules::plot_normal_likelihood(data$EndWeight, sigma = NULL)
bayesrules::plot_normal_likelihood(data$EndWeight, sigma = 47.5)
47.5^2
2256.25*2
4512.5/45
mean(data$EndWeight)
sd(data$EndWeight)
bayesrules::plot_normal_likelihood(data$EndWeight, sigma = sd(data$EndWeight))
prior_normal <- dnorm(x, mean = 0, sd =1)
prior_normal <- rnorm(100, mean = 0, sd =1)
bayesrules::plot_normal_normal(mean = 6.5, sd = 0.4, sigma = 0.5,
y_bar = 5.735, n = 25)
bayesrules::plot_normal_normal(mean = 5, sd = 1, sigma = 0.5,
y_bar = 6, n = 50)
bayesrules::plot_normal_normal(mean = 5, sd = 1, sigma = 1,
y_bar = 6, n = 50)
bayesrules::plot_normal_normal(mean = 5, sd = 1, sigma = 1,
y_bar = 9, n = 50)
bayesrules::plot_normal_normal(mean = 5, sd = 2, sigma = 1,
y_bar = 9, n = 50)
bayesrules::plot_normal_normal(mean = 15, sd = 5, sigma = 1,
y_bar = 10, n = 50)
bayesrules::plot_normal_normal(mean = 15, sd = 5, sigma = 1,
y_bar = 18, n = 500)
bayesrules::plot_normal_normal(mean = 15, sd = 5, sigma = 1,
y_bar = 20, n = 500)
bayesrules::plot_normal_normal(mean = 15, sd = 5, sigma = 1,
y_bar = 20, n = 10)
bayesrules::plot_normal_normal(mean = 15, sd = 5, sigma = 2,
y_bar = , n = 10)
# Step 1: Generate Data
set.seed(123)
data <- rnorm(50, mean = 3, sd = 1)  # Simulate 50 data points from a normal distribution
# Step 2: Define Prior
prior_mean <- 2
prior_sd <- 1
prior_distribution <- dnorm(x, mean = prior_mean, sd = prior_sd)  # Prior distribution
bayesrules::plot_normal_normal(mean = 190, sd = sd(data$EndWeight), sigma = 47.5,
y_bar = mean(data$EndWeight), n = 45)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
library(HDInterval)
library(rstan)
library(rstanarm)
library(bayesplot)
library(ggpubr)
library(flextable)
library(ggplot2)
library(gtsummary)
library(gt)
source(here::here("bayesSim.R"))
set.seed(2648)
theme_set(bayesplot::theme_default())
## Set up dataset -------------------
data.raw = ChickWeight %>%
filter(Time %in% c(0, 21))
data = pivot_wider(data.raw, id_cols = c("Chick"), names_from = "Time", names_prefix = "Time", values_from = "weight") %>%
na.omit() %>%
mutate(Time0= as.numeric(Time0))
colnames(data) = c("Chick", "BaselineWeight", "EndWeight")
bayesrules::plot_normal_likelihood(data$EndWeight, sigma = sd(data$EndWeight))
bayesrules::plot_normal_normal(mean = 190, sd = sd(data$EndWeight), sigma = 47.5,
y_bar = mean(data$EndWeight), n = 45)
data %>%
select(BaselineWeight, EndWeight) %>%
tbl_summary(type = everything() ~ "continuous2",
statistic = list("EndWeight" ~ c(
"{mean}, ({sd})",
"{median} ({p25}, {p75})",
"{min}, {max}"), "BaselineWeight" ~ c("{mean}, ({sd})"))
) %>%
modify_caption("**Table 1. Data Summary**") %>%
modify_footnote(everything() ~ "Weight in grams")
library(rstan)
# Define the Stan Model
gp_model <- "
data {
int<lower = 0> N;     // number of data points
real Y[N];         // observed data
}
parameters {
real mu;              // posterior mean
real<lower=0> sigma;  // posterior standard deviation
}
model {
mu ~ normal(190, 47.5);         // prior for mu
Y ~ normal(mu, sigma);     // vectorized likelihood
}
"
# Simulate the posterior
sim <- stan(model_code = gp_model, data = list(N = length(data$EndWeight), Y = data$EndWeight), chains = 4, iter = 5000*2)
mcmc_trace(sim, pars = c("mu", "sigma"), size = 0.1)
# Calculate posterior parameters based on conjugate model
data_mean <- mean(data$EndWeight)
data_var <- var(data$EndWeight)
prior_mean <- 190
prior_var <- 47.5^2
likelihood_var <- 72
posterior_mean <- (prior_var * data_mean + likelihood_var * prior_mean) / (prior_var + likelihood_var)
posterior_var <- (prior_var * likelihood_var) / (prior_var + likelihood_var)
# Extract posterior parameters from MCMC simulation
posterior_samples <- extract(sim)
posterior_mu <- posterior_samples$mu
posterior_sigma <- posterior_samples$sigma
# Overlay histogram of simulated posterior with conjugate posterior
hist(posterior_mu, freq = FALSE, main = "Simulated Posterior Distribution for mu", xlab = "mu", col = "skyblue")
curve(dnorm(x, mean = posterior_mean, sd = sqrt(posterior_var)), add = TRUE, col = "red", lwd = 2)
# Clinically relevant posterior probability estimation using simulated posterior
estimated_prob <- sum(posterior_mu > 209) / length(posterior_mu)
print(paste("Estimated probability of mu > 209 using MCMC simulated posterior:", round(estimated_prob, digits = 2)))
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
set.seed(1235)
# libraries
library(dplyr)
library(readxl)
library(moments)
library(gt)
library(gee)
library(xtsum)
library(geepack)
library(broom.mixed)
library(corrplot)
# load data
df <- as.data.frame(read_excel(here::here("homework 8","LargePubHlthDataset.xls"))) %>%
mutate(id2 = 1)
# load data
df <- as.data.frame(read_excel("C:/Users/sjang/OneDrive/Documents/Duke/SP_2024/718 _Correlated Data/LargePubHlthDataset.csv"))) %>%
# load data
df <- as.data.frame(read_excel("C:/Users/sjang/OneDrive/Documents/Duke/SP_2024/718 _Correlated Data/LargePubHlthDataset.xls")) %>%
mutate(id2 = 1)
make_table <- function(df, varname){
df_out <- data.frame(SampleSize = nrow(df) - length(which(is.na(df[,varname]))),
Mean = mean(df[,varname], na.rm = T),
Variance = var(df[,varname], na.rm = T),
Skewness = skewness(df[,varname], na.rm = T),
Kurtosis = kurtosis(df[,varname], na.rm = T))
names(df_out) <- c("Sample Size", "Mean", "Variance", "Skewness", "Kurtosis")
return(df_out)
}
# kcal
tab_1_kcal <- cbind(data.frame(`.`=c("", "Under-70", "Over-70", "Male", "Female")),
rbind(make_table(df, "kcal"),
make_table(subset(df, agegrp == 0), "kcal"),
make_table(subset(df, agegrp == 1), "kcal"),
make_table(subset(df, female == 0), "kcal"),
make_table(subset(df, female == 1), "kcal")
)
)
# alcoh
tab_1_alcoh <- cbind(data.frame(`.`=c("", "Under-70", "Over-70", "Non-Smoker", "Current Smoker")),
rbind(
make_table(df, "alcoh"),
make_table(subset(df, agegrp == 0), "alcoh"),
make_table(subset(df, agegrp == 1), "alcoh"),
make_table(subset(df, cursmk == 0), "alcoh"),
make_table(subset(df, cursmk == 1), "alcoh")
)
)
# sysbp
tab_1_sysbp <- cbind(data.frame(`.`=c("", "Under-70", "Over-70", "Male", "Female")),
rbind(
make_table(df, "sysbp"),
make_table(subset(df, agegrp == 0), "sysbp"),
make_table(subset(df, agegrp == 1), "sysbp"),
make_table(subset(df, female == 0), "sysbp"),
make_table(subset(df, female == 1), "sysbp")
)
)
# crp
tab_1_crp <- cbind(data.frame(`.`=c("", "Male", "Female")),
rbind(
make_table(df, "crp"),
make_table(subset(df, female == 0), "crp"),
make_table(subset(df, female == 1), "crp")
)
)
tab_1_crp$Mean <- c(median(df$crp, na.rm=T),
median(subset(df, female == 0)$crp, na.rm=T),
median(subset(df, female == 1)$crp, na.rm=T))
tab_1_crp$Variance <- c(quantile(df$crp, 0.75, na.rm=T) - quantile(df$crp, 0.25, na.rm=T),
quantile(subset(df, female == 0)$crp, 0.75, na.rm=T) - quantile(subset(df, female == 0)$crp, 0.25, na.rm=T),
quantile(subset(df, female == 1)$crp, 0.75, na.rm=T) - quantile(subset(df, female == 1)$crp, 0.25, na.rm=T))
names(tab_1_crp) <- c(".", "Sample Size", "Median", "IQR", "Skewness", "Kurtosis")
gt(tab_1_kcal) %>%
tab_row_group(label="Sex", rows=4:5) %>%
tab_row_group(label="Age Group", rows=2:3) %>%
tab_row_group(label="Full Dataset", rows=1) %>%
fmt_number(columns = 3:6, decimals=2) %>%
tab_header("Total Energy Expenditure (kcal)")
gt(tab_1_alcoh) %>%
tab_row_group(label="Smoking Status", rows=4:5) %>%
tab_row_group(label="Age Group", rows=2:3) %>%
tab_row_group(label="Full Dataset", rows=1) %>%
fmt_number(columns = 3:6, decimals=2) %>%
tab_header("Alcohol Consumption per Week (gm)")
gt(tab_1_sysbp) %>%
tab_row_group(label="Sex", rows=4:5) %>%
tab_row_group(label="Age Group", rows=2:3) %>%
tab_row_group(label="Full Dataset", rows=1) %>%
fmt_number(columns = 3:6, decimals=2) %>%
tab_header("Systolic Blood Pressure (mm/Hg)")
gt(tab_1_crp) %>%
tab_row_group(label="Sex", rows=2:3) %>%
tab_row_group(label="Full Dataset", rows=1) %>%
fmt_number(columns = 3:6, decimals=2) %>%
tab_header("c-Reactive Protein (mg/L)")
colnames(df)
median_test(crp~as.factor(female), df)
install.packages("coin")
coin::median_test(crp~as.factor(female), df)
ggplot(df, aes(x=crp, color=as.factor(female)))+
geom_density()
ggplot(df, aes(x=crp, color=as.factor(female)))+
geom_histogram()
ggplot(df, aes(x=crp, color=as.factor(female)))+
geom_scatter()
ggplot(df, aes(x=crp, color=as.factor(female)))+
geom_point()
range(df$crp)
range(df$crp)
summary(df$crp)
ggplot(df, aes(x=crp, color=as.factor(female)))+
geom_boxplot()
shapiro.test(subset(df, female == 0)$crp)
qqnorm(subset(df, female == 0)$crp)
qqnorm(subset(df, female == 1)$crp)
qqnorm(subset(df, female == 1)$crp-subset(df, female == 0)$crp)
shapiro.test(subset(df, female == 1)$crp-subset(df, female == 0)$crp)
kruskal.test(crp~as.factor(female), df)
wilcox.test(crp~as.factor(female), df)
malecrp <- subset(df, female == 0)$crp
femalecrp <- subset(df, female == 1)$crp
wilcox.test(malecrp, femalecrp, mu=0, paired = TRUE)
malecrp <- subset(df, female == 0)$crp
femalecrp <- subset(df, female == 1)$crp
wilcox.test(x = malecrp, y = femalecrp, mu=0, paired = TRUE)
wilcox.test(x = malecrp, y = femalecrp, mu=0)
summary(malecrp)
summary(femalecrp)
wilcox.test(x = malecrp, y = femalecrp, mu=0, alternative = "two.sided")
wilcox.test(x = malecrp, y = femalecrp, mu=0, alternative = "two.sided", conf.int = TRUE)
summary(malecrp-femalecrp)
summary(femalecrp-malecrp)
wilcox.test(x = malecrp, y = femalecrp, mu=0)
bayesrules::plot_normal_likelihood(data$EndWeight, sigma = sd(data$EndWeight))
bayesrules::plot_normal_likelihood(data$EndWeight, sigma = 47.5)
bayesrules::plot_normal_normal(mean = 190, sd = sd(data$EndWeight), sigma = 47.5,
y_bar = mean(data$EndWeight), n = 45)
mean(data$EndWeight)
47.5^2
sd(data$EndWeight)
71.51027^2
5113.719/((45*(47.5^2))+71.51027)
190*0.05033051
45*(47.5^2)
101531.2/((45*(47.5^2))+(71.51027^2))
0.9520487*218.6889
71.51027^2
5113.719*(47.5^2)
(45*(47.5^2))+(71.51027^2)
11537828/106645
9.562797+208.2025
218.6889-190
28.6889^2
823.053/((2*(47.5^2))/45)
sd(data$EndWeight)
mean(data$EndWeight)
summarize_normal_normal(mean = 190, sd = 47.5, sigma = 71.51027,
y_bar = 218.6889, n = 45)
plot_normal_normal(mean = 190, sd = 47.5, sigma = 71.51027,
y_bar = 218.6889, n = 45)
bayesrules::plot_normal_normal(mean = 190, sd = 47.5, sigma = 71.51027,
y_bar = 218.6889, n = 45)
bayesrules::summarize_normal_normal(mean = 190, sd = 47.5, sigma = 71.51027,
y_bar = 218.6889, n = 45)
bayesrules::plot_normal_normal(mean = 190, sd = 47.5, sigma = 71.51027,
y_bar = 218.6889, n = 45)
distribution_normal(45, mean = 217.3132, sd = 10.4014)
install.packages("bayestestR")
bayestestR::distribution_normal(45, mean = 217.3132, sd = 10.4014)
plot(bayestestR::distribution_normal(45, mean = 217.3132, sd = 10.4014))
bayesrules::plot_normal_normal(mean = 190, sd = 47.5, sigma = 71.51027,
y_bar = 218.6889, n = 45)
r
bayesrules::summarize_normal_normal(mean = 190, sd = 47.5, sigma = 71.51027,
y_bar = 218.6889, n = 45)
pnorm(209, mean = 217.3132, sd = 10.4014)
pnorm(209, mean = 217.3132, sd = 10.4014, lower.tail = FALSE)
sd(data$EndWeight)
bayesrules::plot_normal_likelihood(data$EndWeight, sigma = 71.51027)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
library(rstanarm)
library(tidyverse)
path = here::here("bayesSim.R")
source(path)
ost = read.csv(here::here("Project 4", "osteo.csv")) %>%
mutate(fracture.b = ifelse(fracture=="Yes", 1, 0),
priorfrac.b = ifelse(priorfrac == "Yes", 1, 0))
library(rstanarm)
library(bayesplot)
library(tidyverse)
library(tidybayes)
library(broom.mixed)
sd0 = 0.597^2; sd0
sd1 = 1.359^2; sd1
mod = stan_glm(fracture.b ~ priorfrac.b,
data = ost,
family = binomial,
prior_intercept = normal(-1.386, sd0, autoscale = TRUE),
prior = normal(0.539,sd1, autoscale = TRUE),
chains = 4,
iter = 5000*2,
seed = 1345,
prior_PD = TRUE)
prior_summary(mod)
samples = as.matrix(mod)
summary(samples)
mean.b1 = mean(samples[, "priorfrac.b"])
median.b1 = median(samples[, "priorfrac.b"])
cred.int = hdi(samples[, "priorfrac.b"])
prior_summary(mod)
samples = as.matrix(mod)
summary(samples)
mod.post = update(mod, prior_PD = FALSE)
print(mod.post, digits= 3)
mcmc.chain = as.matrix(mod.post)
ci = hdi(mcmc.chain[, "priorfrac.b"]); ci
med = median(mcmc.chain[, "priorfrac.b"]); med
ci.exp = hdi(exp(mcmc.chain[, "priorfrac.b"])); ci.exp
med.exp = median(exp(mcmc.chain[,"priorfrac.b"]), na.rm = TRUE); med.exp
mcmc_dens(mod.post, pars = c("priorfrac.b")) + geom_vline(xintercept = med, color = "black") + geom_vline(xintercept = ci[1], color = "green3") + geom_vline(xintercept = ci[2], color = "green3") + ggtitle("Log Odds Scale")
mcd = as.data.frame(mcmc.chain)
ggplot(data = mcd) + geom_density(aes(x = exp(priorfrac.b)), fill = "blue", alpha = 0.25) + geom_vline(xintercept = med.exp, color = "black") + geom_vline(xintercept = ci.exp[1], color = "green3") + geom_vline(xintercept = ci.exp[2], color = "green3") + ggtitle("Odds Scale")
ggplot(data = mcd) + geom_density(aes(x = exp(priorfrac.b)), fill = "blue", alpha = 0.25) + geom_vline(xintercept = med.exp, color = "black") + geom_vline(xintercept = ci.exp[1], color = "green3") + geom_vline(xintercept = ci.exp[2], color = "green3") + ggtitle("Odds Scale")
print(mod.post, digits= 3)
mcmc.chain = as.matrix(mod.post)
ci = hdi(mcmc.chain[, "priorfrac.b"]); ci
med = median(mcmc.chain[, "priorfrac.b"]); med
ci.exp = hdi(exp(mcmc.chain[, "priorfrac.b"])); ci.exp
med.exp = median(exp(mcmc.chain[,"priorfrac.b"]), na.rm = TRUE); med.exp
mcmc_dens(mod.post, pars = c("priorfrac.b")) + geom_vline(xintercept = med, color = "black") + geom_vline(xintercept = ci[1], color = "green3") + geom_vline(xintercept = ci[2], color = "green3") + ggtitle("Log Odds Scale")
mcd = as.data.frame(mcmc.chain)
ggplot(data = mcd) + geom_density(aes(x = exp(priorfrac.b)), fill = "blue", alpha = 0.25) + geom_vline(xintercept = med.exp, color = "black") + geom_vline(xintercept = ci.exp[1], color = "green3") + geom_vline(xintercept = ci.exp[2], color = "green3") + ggtitle("Odds Scale")
mcmc_dens(mod.post, pars = c("priorfrac.b")) + geom_vline(xintercept = med, color = "black") + geom_vline(xintercept = ci[1], color = "green3") + geom_vline(xintercept = ci[2], color = "green3") + ggtitle("Log Odds Scale")
signif(ci[1], 2)
signif(ci[2], 2)
mod = stan_glm(fracture.b ~ priorfrac.b + age,
data = ost,
family = binomial,
prior_intercept = normal(0, 2.5, autoscale = TRUE),
prior = normal(0, 2.5, autoscale = TRUE),
chains = 4,
iter = 5000*2,
seed = 1345,
prior_PD = TRUE)
prior_summary(mod)
samples = as.matrix(mod)
summary(samples)
mean.b1 = mean(samples[, "priorfrac.b"])
median.b1 = median(samples[, "priorfrac.b"])
cred.int = hdi(samples[, "priorfrac.b"])
prior_summary(mod)
summary(samples)
mean.b1 = mean(samples[, "priorfrac.b"])
median.b1 = median(samples[, "priorfrac.b"])
cred.int = hdi(samples[, "priorfrac.b"])
summary(samples)
prior_summary(mod)
prior_summary.stanreg(mod)
prior_summary(mod)
mod
mod$prior.info
mod$prior.info
mod$model
mod$coefficients
mod$prior.weights
mod$prior.weights
mod$call
mod$algorithm
mod$weights
prior_summary(mod)
mod.post = update(mod, prior_PD = FALSE)
print(mod.post, digits= 3)
mcmc.chain = as.matrix(mod.post)
ci = hdi(mcmc.chain[, "priorfrac.b"])
med = median(mcmc.chain[, "priorfrac.b"])
ci.exp = hdi(exp(mcmc.chain[, "priorfrac.b"]))
med.exp = median(exp(mcmc.chain[,"priorfrac.b"]), na.rm = TRUE)
mcmc_dens(mod.post, pars = c("priorfrac.b")) + geom_vline(xintercept = med, color = "black") + geom_vline(xintercept = ci[1], color = "green3") + geom_vline(xintercept = ci[2], color = "green3") + ggtitle("Log Odds Scale")
mcd = as.data.frame(mcmc.chain)
ggplot(data = mcd) + geom_density(aes(x = exp(priorfrac.b)), fill = "blue", alpha = 0.25) + geom_vline(xintercept = med.exp, color = "black") + geom_vline(xintercept = ci.exp[1], color = "green3") + geom_vline(xintercept = ci.exp[2], color = "green3") + ggtitle("Odds Scale")
signif(med.exp,3)
library(sjPlot)
age_grid = seq(55, 80, by = 5)
# Create data frame for predictions
pred_data <- expand.grid(age = age_grid, priorfrac.b = c(0, 1))
# Predict posterior probabilities of fracture for each age and prior history
pred_probs <- predict(mod.post, newdata = pred_data, type = "response",
allow_new_levels = TRUE, re.form = NA)
# Add predicted probabilities to pred_data
pred_data$predicted_probability <- pred_probs
# Plot posterior predicted probabilities
ggplot(pred_data, aes(x = age, y = predicted_probability, color = factor(priorfrac.b))) +
geom_line(size = 1) +
labs(title = "Posterior Predicted Probability of Fracture at 1 Year Post-Diagnosis",
x = "Age at Diagnosis", y = "Predicted Probability of Fracture") +
scale_color_manual(values = c("blue", "red"), labels = c("No Prior Fracture", "Prior Fracture")) +
theme_minimal()
signif(med.exp,3)
mod.post = update(mod, prior_PD = FALSE)
print(mod.post, digits= 3)
mcmc.chain = as.matrix(mod.post)
ci = hdi(mcmc.chain[, "priorfrac.b:age"])
mod = stan_glm(fracture.b ~ priorfrac.b * age,
data = ost,
family = binomial,
prior_intercept = normal(0, 2.5, autoscale = TRUE),
prior = normal(0, 2.5, autoscale = TRUE),
chains = 4,
iter = 5000*2,
seed = 1345,
prior_PD = TRUE)
prior_summary(mod)
samples = as.matrix(mod)
summary(samples)
mean.b1 = mean(samples[, "priorfrac.b"])
median.b1 = median(samples[, "priorfrac.b"])
cred.int = hdi(samples[, "priorfrac.b"])
mod.post = update(mod, prior_PD = FALSE)
print(mod.post, digits= 3)
mcmc.chain = as.matrix(mod.post)
ci = hdi(mcmc.chain[, "priorfrac.b:age"])
med = median(mcmc.chain[, "priorfrac.b:age"])
ci.exp = hdi(exp(mcmc.chain[, "priorfrac.b:age"]))
med.exp = median(exp(mcmc.chain[,"priorfrac.b:age"]), na.rm = TRUE)
mcmc_dens(mod.post, pars = c("priorfrac.b:age")) + geom_vline(xintercept = med, color = "black") + geom_vline(xintercept = ci[1], color = "green3") + geom_vline(xintercept = ci[2], color = "green3") + ggtitle("Log Odds Scale")
## WE DON'T NEED ODDS SCALE PLOT
# mcd = as.data.frame(mcmc.chain)
#
# ggplot(data = mcd) + geom_density(aes(x = exp(priorfrac.b)), fill = "blue", alpha = 0.25) + geom_vline(xintercept = med.exp, color = "black") + geom_vline(xintercept = ci.exp[1], color = "green3") + geom_vline(xintercept = ci.exp[2], color = "green3") + ggtitle("Odds Scale")
signif(med.exp,3)
print(mod.post, digits= 3)
mcmc_dens(mod.post, pars = c("priorfrac.b:age")) + geom_vline(xintercept = med, color = "black") + geom_vline(xintercept = ci[1], color = "green3") + geom_vline(xintercept = ci[2], color = "green3") + ggtitle("Log Odds Scale")
